{"version":3,"sources":["Counter.js","CounterValue.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","count","setCount","fetchPost","inputValue","className","onClick","isNaN","type","name","value","onChange","e","target","pattern","console","log","parseInt","prevCount","toString","CounterValue","App","useState","postNumber","setPostNumber","useEffect","fetchNumber","a","fetch","data","json","response","number","method","headers","body","JSON","stringify","counter1","posted","text","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAyEeA,EAvEC,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UAC9BC,EAAaH,EA+CjB,OACE,sBAAKI,UAAU,gBAAf,UAEE,wBAAQA,UAAU,QAAQC,QAhCZ,WACZC,MAAMH,IAA8B,KAAfA,EACvBF,EAAS,KAGG,KAAVD,GAIJC,EAASD,EAAQ,GACjBE,EAAUF,EAAQ,IAJhBC,EAAS,KA0BT,eAIA,uBACEM,KAAK,SACLC,KAAK,YACLC,MAAOT,EACPU,SA3BqB,SAACC,GAE1B,GADAR,EAAaQ,EAAEC,OAAOH,MACC,KAAnBE,EAAEC,OAAOH,MAAb,CAKA,IAAKE,EAAEC,OAAOH,MAAQ,IAGpB,OAFAR,EAAS,aACTC,EAAU,QAGZD,EAASU,EAAEC,OAAOH,OAClBP,EAAUS,EAAEC,OAAOH,YAVjBR,EAAS,KAyBPY,QAAQ,8BAGV,wBAAQT,UAAU,OAAOC,QA7DX,WAChB,OAAIC,MAAMH,IAA8B,KAAfA,GACvBW,QAAQC,IAAI,+CAAgDZ,QAC5DF,EAAS,MAGPe,SAAShB,GAAS,EAAI,KACxBE,EAAUc,SAAShB,GAAS,QAC5BC,EAAS,UAIXA,GAAS,SAACgB,GACR,OAAqBD,SAASC,GAAa,GAAGC,mBAEhDhB,GAAWc,SAAShB,GAAS,GAAGkB,cA8C9B,mBCtDSC,EATM,SAAC,GAAe,IAAbnB,EAAY,EAAZA,MACtB,OACE,sBAAKI,UAAU,yBAAf,UACE,kDACA,4BAAIJ,QCoEKoB,EAtEH,WACV,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOrB,EAAP,KAAcC,EAAd,KAEAa,QAAQC,WAAWf,GACnBc,QAAQC,IAAI,oBAAqBf,GACjCwB,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAW,uCAAG,8BAAAC,EAAA,sEACCC,MAAM,gFADP,cACZC,EADY,gBAIKA,EAAKC,OAJV,OAIZC,EAJY,OAKlBhB,QAAQC,IAAI,cAAee,GAC3B7B,EAAS6B,EAASZ,YANA,2CAAH,qDAUXhB,EAAS,uCAAG,WAAO6B,GAAP,iBAAAL,EAAA,6DAChBH,GAAc,GADE,kBAGOI,MACnB,qEACA,CACEK,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEC,SAAUrB,SAASe,OARhC,cAGRO,EAHQ,gBAWKA,EAAOC,OAXZ,OAWRA,EAXQ,OAYdzB,QAAQC,IAAI,UAAWwB,GACvBhB,GAAc,GAbA,kDAedA,GAAc,GACdT,QAAQC,IAAR,MAhBc,0DAAH,sDAoBf,OACE,mCACE,qBAAKX,UAAU,oBAAf,SACE,sBAAKA,UAAU,SAAf,UACE,qBAAKA,UAAU,UAAf,SACGkB,EACC,sBAAKlB,UAAU,aAAf,UACE,qBAAKoC,MAAM,WACX,2DAGF,KAGJ,cAAC,EAAD,CACExC,MAAOA,EACPC,SAAUA,EACVC,UAAWA,EACXqB,cAAeA,EACfD,WAAYA,IAId,cAAC,EAAD,CAActB,MAAOA,YCvDhByC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7c8e3df1.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Counter = ({ count, setCount, fetchPost }) => {\n  let inputValue = count;\n  const increment = () => {\n    if (isNaN(inputValue) || inputValue === \"\") {\n      console.log(\"inside if of increment value of increment is\", inputValue);\n      setCount(\"0\");\n      return;\n    }\n    if (parseInt(count) + 1 > 1000) {\n      fetchPost(parseInt(count) + 1);\n      setCount(\"1000\");\n      return;\n    }\n    // setCount(count + 1);\n    setCount((prevCount) => {\n      return (prevCount = (parseInt(prevCount) + 1).toString());\n    });\n    fetchPost((parseInt(count) + 1).toString());\n  };\n  const decrement = () => {\n    if (isNaN(inputValue) || inputValue === \"\") {\n      setCount(\"0\");\n      return;\n    }\n    if (count === \"\") {\n      setCount(\"\");\n      return;\n    }\n    setCount(count - 1);\n    fetchPost(count - 1);\n  };\n\n  const inputNumberHandler = (e) => {\n    inputValue = e.target.value;\n    if (e.target.value === \"\") {\n      setCount(\"\"); //0 is getting appended\n      //   fetchPost(\"\");\n      return;\n    }\n    if (+e.target.value > 1000) {\n      setCount(\"1000\");\n      fetchPost(\"1000\");\n      return;\n    }\n    setCount(e.target.value);\n    fetchPost(e.target.value);\n    return;\n  };\n  return (\n    <div className=\"counter-input\">\n      {/* <div className=\"button\"> */}\n      <button className=\"minus\" onClick={decrement}>\n        -\n      </button>\n      {/* </div> */}\n      <input\n        type=\"number\"\n        name=\"inputName\"\n        value={count}\n        onChange={inputNumberHandler}\n        pattern=\"^(?:-?[1-9]\\d*$)|(?:^0)$\"\n      />\n      {/* <div className=\"button\"> */}\n      <button className=\"plus\" onClick={increment}>\n        +\n      </button>\n      {/* </div> */}\n    </div>\n  );\n};\n\nexport default Counter;\n","import React from \"react\";\n\nconst CounterValue = ({ count }) => {\n  return (\n    <div className=\"countervalue-container\">\n      <h5>Counter Value is</h5>\n      <p>{count}</p>\n    </div>\n  );\n};\n\nexport default CounterValue;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Counter from \"./Counter\";\nimport CounterValue from \"./CounterValue\";\nconst App = () => {\n  const [postNumber, setPostNumber] = useState(false);\n  const [count, setCount] = useState(\"\");\n  // const [inputValue, setInputValue] = useState(\"\");\n  console.log(typeof count);\n  console.log(\"value of count is\", count);\n  useEffect(() => {\n    fetchNumber();\n  }, []);\n\n  const fetchNumber = async () => {\n    const data = await fetch(\n      ` https://interview-8e4c5-default-rtdb.firebaseio.com/front-end/counter1.json`\n    );\n    const response = await data.json();\n    console.log(\"response is\", response);\n    setCount(response.toString());\n    // setInputValue(response.toString());\n  };\n\n  const fetchPost = async (number) => {\n    setPostNumber(true);\n    try {\n      const posted = await fetch(\n        \"https://interview-8e4c5-default-rtdb.firebaseio.com/front-end.json\",\n        {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ counter1: parseInt(number) }),\n        }\n      );\n      const text = await posted.text();\n      console.log(\"text is\", text);\n      setPostNumber(false);\n    } catch (error) {\n      setPostNumber(false);\n      console.log(error);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"counter-container\">\n        <div className=\"holder\">\n          <div className=\"heading\">\n            {postNumber ? (\n              <div className=\"save-count\">\n                <div class=\"loader\"></div>\n                <h5>Saving count value is </h5>\n              </div>\n            ) : (\n              \"\"\n            )}\n          </div>\n          <Counter\n            count={count}\n            setCount={setCount}\n            fetchPost={fetchPost}\n            setPostNumber={setPostNumber}\n            postNumber={postNumber}\n            // inputValue={inputValue}\n            // setInputValue={setInputValue}\n          />\n          <CounterValue count={count} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}